import numpy as np

WIN_STATES = [
    # Horizontal
    ((0, 0), (0, 1), (0, 2), (0, 3)),
    ((0, 1), (0, 2), (0, 3), (0, 4)),
    ((0, 2), (0, 3), (0, 4), (0, 5)),
    ((0, 3), (0, 4), (0, 5), (0, 6)),

    ((1, 0), (1, 1), (1, 2), (1, 3)),
    ((1, 1), (1, 2), (1, 3), (1, 4)),
    ((1, 2), (1, 3), (1, 4), (1, 5)),
    ((1, 3), (1, 4), (1, 5), (1, 6)),

    ((2, 0), (2, 1), (2, 2), (2, 3)),
    ((2, 1), (2, 2), (2, 3), (2, 4)),
    ((2, 2), (2, 3), (2, 4), (2, 5)),
    ((2, 3), (2, 4), (2, 5), (2, 6)),

    ((3, 0), (3, 1), (3, 2), (3, 3)),
    ((3, 1), (3, 2), (3, 3), (3, 4)),
    ((3, 2), (3, 3), (3, 4), (3, 5)),
    ((3, 3), (3, 4), (3, 5), (3, 6)),

    ((4, 0), (4, 1), (4, 2), (4, 3)),
    ((4, 1), (4, 2), (4, 3), (4, 4)),
    ((4, 2), (4, 3), (4, 4), (4, 5)),
    ((4, 3), (4, 4), (4, 5), (4, 6)),

    ((5, 0), (5, 1), (5, 2), (5, 3)),
    ((5, 1), (5, 2), (5, 3), (5, 4)),
    ((5, 2), (5, 3), (5, 4), (5, 5)),
    ((5, 3), (5, 4), (5, 5), (5, 6)),

    # Vertical
    ((0, 0), (1, 0), (2, 0), (3, 0)),
    ((1, 0), (2, 0), (3, 0), (4, 0)),
    ((2, 0), (3, 0), (4, 0), (5, 0)),

    ((0, 1), (1, 1), (2, 1), (3, 1)),
    ((1, 1), (2, 1), (3, 1), (4, 1)),
    ((2, 1), (3, 1), (4, 1), (5, 1)),

    ((0, 2), (1, 2), (2, 2), (3, 2)),
    ((1, 2), (2, 2), (3, 2), (4, 2)),
    ((2, 2), (3, 2), (4, 2), (5, 2)),

    ((0, 3), (1, 3), (2, 3), (3, 3)),
    ((1, 3), (2, 3), (3, 3), (4, 3)),
    ((2, 3), (3, 3), (4, 3), (5, 3)),

    ((0, 4), (1, 4), (2, 4), (3, 4)),
    ((1, 4), (2, 4), (3, 4), (4, 4)),
    ((2, 4), (3, 4), (4, 4), (5, 4)),

    ((0, 5), (1, 5), (2, 5), (3, 5)),
    ((1, 5), (2, 5), (3, 5), (4, 5)),
    ((2, 5), (3, 5), (4, 5), (5, 5)),

    ((0, 6), (1, 6), (2, 6), (3, 6)),
    ((1, 6), (2, 6), (3, 6), (4, 6)),
    ((2, 6), (3, 6), (4, 6), (5, 6)),

    # Diag \
    ((0, 0), (1, 1), (2, 2), (3, 3)),
    ((0, 1), (1, 2), (2, 3), (3, 4)),
    ((0, 2), (1, 3), (2, 4), (3, 5)),
    ((0, 3), (1, 4), (2, 5), (3, 6)),

    ((1, 0), (2, 1), (3, 2), (4, 3)),
    ((1, 1), (2, 2), (3, 3), (4, 4)),
    ((1, 2), (2, 3), (3, 4), (4, 5)),
    ((1, 3), (2, 4), (3, 5), (4, 6)),

    ((2, 0), (3, 1), (4, 2), (5, 3)),
    ((2, 1), (3, 2), (4, 3), (5, 4)),
    ((2, 2), (3, 3), (4, 4), (5, 5)),
    ((2, 3), (3, 4), (4, 5), (5, 6)),

    # Diag /
    ((3, 0), (2, 1), (1, 2), (0, 3)),
    ((3, 1), (2, 2), (1, 3), (0, 4)),
    ((3, 2), (2, 3), (1, 4), (0, 5)),
    ((3, 3), (2, 4), (1, 5), (0, 6)),

    ((4, 0), (3, 1), (2, 2), (1, 3)),
    ((4, 1), (3, 2), (2, 3), (1, 4)),
    ((4, 2), (3, 3), (2, 4), (1, 5)),
    ((4, 3), (3, 4), (2, 5), (1, 6)),

    ((5, 1), (4, 2), (3, 3), (2, 4)),
    ((5, 0), (4, 1), (3, 2), (2, 3)),
    ((5, 2), (4, 3), (3, 4), (2, 5)),
    ((5, 3), (4, 4), (3, 5), (2, 6)),
]


class State:
    def __init__(self):
        self.board = np.zeros((2, 6, 7), dtype=bool)
        self.current_player = 0

    def get_valid_actions(self):
        return ~self.board[:, 0].any(0)
        # valid_actions = np.ones((7,), dtype=bool)
        # for i in range(7):
        #     if self.board[0, 0, i] or self.board[1, 0, i]:
        #         valid_actions[i] = False
        # return valid_actions

    def take_action(self, i):
        for j in reversed(range(6)):
            if not self.board[0, j, i] and not self.board[1, j, i]:
                self.board[self.current_player, j, i] = True
                break
        self.current_player = 1 if self.current_player == 0 else 0

    def is_game_over(self):
        return not self.get_valid_actions().any() or self.get_winner() is not None

    def get_winner(self):
        if self.player_won(0):
            return 0
        elif self.player_won(1):
            return 1
        return None

    def player_won(self, player):
        # for state in WIN_STATES:
        #     idx = np.ix_(*state)
        #     if self.board[player][idx].all():
        #         return True
        return False

    def __repr__(self):
        s = ''
        for j in range(6):
            for i in range(7):
                if self.board[0, j, i]:
                    s += 'ðŸ”´'
                elif self.board[1, j, i]:
                    s += 'ðŸ”µ'
                else:
                    s += 'âš«'
            s += '\n'
        return s
